import java.util.Properties;
import java.util.concurrent.Future;

import com.sksamuel.avro4s.{FromRecord, RecordFormat, ToRecord};
import org.apache.avro.generic.GenericRecord;
import org.apache.kafka.clients.producer._;

class KProducer[K <: Product, V <: Product] {

  val kafkaProps = new Properties();
  kafkaProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "127.0.0.1:9092");
  kafkaProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,
     classOf[KafkaAvroSerializer].getCanonicalName);
  kafkaProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,
     classOf[KafkaAvroSerializer].getCanonicalName);
  kafkaProps.put("schema.registry.url", "http://127.0.0.1:8081");
  private lazy val producer  = new KafkaProducer[GenericRecord, GenericRecord](kafkaProps);

  def produce(topic: String, key: K, value: V, partition: Int = 0)
    (implicit to: ToRecord[K], from: FromRecord[K], to: ToRecord[V], from: FromRecord[V])
    : Future[RecordMetadata] = {
    val keyRec = RecordFormat[K].to(key);
    val valueRec = RecordFormat[V].to(value);
    val data: ProducerRecord[GenericRecord, GenericRecord] = new ProducerRecord(topic, partition, keyRec, valueRec);
    producer.send(data);
  }
}
